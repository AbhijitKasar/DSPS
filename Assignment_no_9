#include <iostream>
#include <string>
using namespace std;

struct Node {
    string name;
    double donationAmount;
    Node* next;
    Node* prev;
};

class DonorList {
private:
    Node* head = NULL;

public:
    void insert() {
        Node* newNode = new Node();
        if (newNode == NULL) {
            cout << "Memory allocation failed" << endl;
            return;
        }

        cout << "Enter the name of the donor: ";
        cin >> newNode->name;

        cout << "Enter the donation amount: ";
        cin >> newNode->donationAmount;

        newNode->next = NULL;
        newNode->prev = NULL;

        if (head == NULL) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->prev = temp;
        }
        cout << "Donor added successfully!" << endl;
    }

    void deleteDonor() {
        if (head == NULL) {
            cout << "No donors available to delete." << endl;
            return;
        }

        cout << "Enter the name of the donor to delete: ";
        string nameToDelete;
        cin >> nameToDelete;

        Node* temp = head;
        while (temp != NULL) {
            if (temp->name == nameToDelete) {
                if (temp->prev != NULL) {
                    temp->prev->next = temp->next;
                } else {
                    head = temp->next;
                }

                if (temp->next != NULL) {
                    temp->next->prev = temp->prev;
                }

                delete temp;
                cout << "Donor deleted successfully!" << endl;
                return;
            }
            temp = temp->next;
        }
        cout << "Donor not found!" << endl;
    }

    void update() {
        if (head == NULL) {
            cout << "No donors available to update." << endl;
            return;
        }

        cout << "Enter the name of the donor to update: ";
        string nameToUpdate;
        cin >> nameToUpdate;

        Node* temp = head;
        while (temp != NULL) {
            if (temp->name == nameToUpdate) {
                cout << "Enter the new name of the donor: ";
                cin >> temp->name;

                cout << "Enter the new donation amount: ";
                cin >> temp->donationAmount;

                cout << "Donor details updated successfully!" << endl;
                return;
            }
            temp = temp->next;
        }
        cout << "Donor not found!" << endl;
    }

    void search() {
        if (head == NULL) {
            cout << "No donors available." << endl;
            return;
        }

        cout << "Enter the name of the donor to search: ";
        string nameToSearch;
        cin >> nameToSearch;

        Node* temp = head;
        while (temp != NULL) {
            if (temp->name == nameToSearch) {
                cout << "Donor found!" << endl;
                cout << "Name: " << temp->name << ", Donation Amount: " << temp->donationAmount << endl;
                return;
            }
            temp = temp->next;
        }
        cout << "Donor not found!" << endl;
    }

    void display() {
        if (head == NULL) {
            cout << "No donors available." << endl;
            return;
        }

        cout << "List of donors:" << endl;
        Node* temp = head;
        while (temp != NULL) {
            cout << "Name: " << temp->name << "\n Donation Amount: " << temp->donationAmount << endl;
            temp = temp->next;
        }
    }
};

int main() {
    DonorList l;
    int choice, ch;

    do {
        cout << "\nMenu:\n";
        cout << "1. Insert donor details\n";
        cout << "2. Delete donor details\n";
        cout << "3. Update donor details\n";
        cout << "4. Search for a donor\n";
        cout << "5. Display all donors\n";
        cout << "Enter your choice: ";
        cin >> ch;

        switch (ch) {
        case 1:
            l.insert();
            break;
        case 2:
            l.deleteDonor();
            break;
        case 3:
            l.update();
            break;
        case 4:
            l.search();
            break;
        case 5:
            l.display();
            break;
        default:
            cout << "Invalid choice!" << endl;
            break;
        }

        cout << "Press 1 to continue: ";
        cin >> choice;
    } while (choice == 1);

    return 0;
}
